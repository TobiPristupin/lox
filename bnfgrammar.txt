GRAMMAR ADJUSTED FOR PRECEDENCE AND ASSOCIATIVITY:

program :== declaration* EOF ;

//statements
declaration :== varDecl | funDecl | classDecl | statement ;
funDecl :== "fun" function ;
classDecl :== "class" IDENTIFIER "{" function* "}" ;
function :== IDENTIFIER "(" parameters? ")" block ;
parameters :== IDENTIFIER ("," IDENTIFIER)* ;
varDecl :== "var" IDENTIFIER ("=" expression)? ";" ;
statement :== exprStatement | ifStatement | printStatement | whileStmt | forStmt | returnStmt | block;
exprStatement :== expression ";" ;
printStatement :== "print" expression ";" ;
ifStatement :== "if" "(" expression ")" statement ("elif" "(" expression ")" statement)* ("else" statement)? ;
whileStmt :== "while" "(" expression ")" statement ;
forStmt :== "for" "(" (varDecl | exprStatement | ";") expression? ";" expression? ")" statement;
returnStmt :== "return" expression? ";" ;
block = "{" declaration* "}" ;

//expressions
expression :== assignment
assignment :== (IDENTIFIER "=" equality ";") | lambda;
lambda :== "lambda" arguments? ":" statement | logic_or ;
logic_or :== logic_and ("or" logic_and)* ;
logic_and :== equality ("and" equality)* ;
equality :== comparison ( ("==" | "!=") comparison )* ;
comparison :== addition ( (">" | ">=" | "<" | "<=") addition )* ;
addition :== multiplication ( ("-" | "+") multiplication )* ;
multiplication :== unary ( ("/" | "*") unary )* ;
unary :== ("!" | "-") unary | prefix ;
prefix :== ("++" | "--") postfix |
postfix :==  call ("++" | "--")* ;
call :== primary ( "(" arguments ")" | "." IDENTIFIER)* ;
arguments :== expression ( "," expression)* ;
primary :== NUMBER | STRING | IDENTIFIER | "false" | "true" | "nil" | "(" expression ")" ;


//EXTRA FEATURES ADDED
* elif
* break and continue
* print supports "\n" and "\t", empty print prints a newline
* support for prefix and postfix ++ and --

#14(6+1)61 68yeee79y