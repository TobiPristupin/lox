GRAMMAR ADJUSTED FOR PRECEDENCE AND ASSOCIATIVITY:

program :== declaration* EOF ;

//statements
declaration :== varDecl | statement ;
varDecl :== "var" IDENTIFIER ("=" expression)? ";" ;
statement :== exprStatement | ifStatement | printStatement | whileStmt | forStmt | block;
exprStatement :== expression ";" ;
printStatement :== "print" expression ";" ;
ifStatement :== "if" "(" expression ")" statement ("elif" "(" expression ")" statement)* ("else" statement)? ;
whileStmt :== "while" "(" expression ")" statement ;
forStmt :== "for" "(" (varDecl | exprStatement | ";") expression? ";" expression? ")" statement;
block = "{" declaration* "}" ;

//expressions
expression :== assignment
assignment :== (IDENTIFIER "=" equality ";") | logic_or;
logic_or :== logic_and ("or" logic_and)* ;
logic_and :== equality ("and" equality)* ;
equality :== comparison ( ("==" | "!=") comparison )* ;
comparison :== addition ( (">" | ">=" | "<" | "<=") addition )* ;
addition :== multiplication ( ("-" | "+") multiplication )* ;
multiplication :== unary ( ("/" | "*") unary )* ;
unary :== ("!" | "-") unary | primary ;
primary :== NUMBER | STRING | IDENTIFIER | "false" | "true" | "nil" | "(" expression ")" ;


//EXTRA FEATURES ADDED
* elif
