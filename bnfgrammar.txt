GRAMMAR ADJUSTED FOR PRECEDENCE AND ASSOCIATIVITY:

program :== declaration* EOF ;

variableDeclaration :== "var" IDENTIFIER ("=" expression)? ";" ;
declaration :== variableDeclaration | statement ;
statement :== exprStatement | printStatement ;
exprStatement :== expression ";" ;
printStatement :== "print" expression ";" ;

expression :== equality
equality :== comparison ( ("==" | "!=") comparison )* ;
comparison :== addition ( (">" | ">=" | "<" | "<=") addition )* ;
addition :== multiplication ( ("-" | "+") multiplication )* ;
multiplication :== unary ( ("/" | "*") unary )* ;
unary :== ("!" | "-") unary | primary ;
primary :== NUMBER | STRING | IDENTIFIER | "false" | "true" | "nil" | "(" expression ")" ;



SIMPLIFIED GRAMMAR:

program :== declaration* EOF ;

declaration :== variableDeclaration | statement ;
statement :== exprStatement | printStatement ;
exprStatement :== expression ";" ;
printStatement :== "print" expression ";" ;

expression :== literal | unary | binary | grouping ;
literal :== NUMBER | STRING | "true" | "false" | "nil" ;
unary :== ("-" | "!") expression ;
grouping :== "(" expression ")" ;
binary :== expression operator expression
operator:== "==" | "!=" | "<" | "<=" | ">" | ">=" | "+"  | "-"  | "*" | "/" ;


